{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e796c177-0bd3-4403-8616-b91efa20c986",
   "metadata": {},
   "source": [
    "DADOS NUMÉRICOS\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e300b50c-11f2-4e29-a0f6-e3ec582feeb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "valor de a=1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#variavel inteira\n",
    "a=1\n",
    "print(\"valor de a=\" + str(a)) # print usada para mostrar valor de a\n",
    "type(a) #qual \"tipo\" é o a (numero inteiro, ponto flutuante, texto...)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5b8fe528-6831-4641-adc3-cc278bc20446",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#variavel de dupla precisão\n",
    "b=1.0 #b é um numero de ponto flutuante\n",
    "print(b)\n",
    "type(b)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7480800b-cf5d-4cde-9575-1ebc6e6f9213",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#converter de floar para inteiro\n",
    "c= int(b) #converter de numero de ponto flutuante para numero inteiro (1.0 para 1)\n",
    "print(c)\n",
    "type (c)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0694c05f-478c-40d6-8909-53512e55086e",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'nan' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[11], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m#Declarando nan\u001b[39;00m\n\u001b[0;32m      2\u001b[0m  \u001b[38;5;66;03m#importando numpy e declarando como np\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m d \u001b[38;5;241m=\u001b[39m \u001b[43mnan\u001b[49m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28mprint\u001b[39m(d)\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28mtype\u001b[39m(d)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'nan' is not defined"
     ]
    }
   ],
   "source": [
    "#Declarando nan\n",
    " #importando numpy e declarando como np\n",
    "d = nan\n",
    "print(d)\n",
    "type(d)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d74ccca3-1160-4f5a-96ec-09b56affe3e2",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[9], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Operação com NaN\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m e \u001b[38;5;241m=\u001b[39m \u001b[43md\u001b[49m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m1\u001b[39m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(e)\n\u001b[0;32m      4\u001b[0m e \u001b[38;5;241m=\u001b[39m d\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'd' is not defined"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a4e11fcc-6f2d-4265-be6f-ee36a085bf90",
   "metadata": {},
   "source": [
    "DADOS DE TEXTO\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bdc1dd87-3de0-4810-b5fe-543de7a6f7a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fábio\n",
      "Gabriel\n",
      "FábioGabriel\n",
      "Fábio Gabriel\n"
     ]
    }
   ],
   "source": [
    "# Declaração de variável texto\n",
    "f = 'Fábio'\n",
    "g = \"Gabriel\"\n",
    "print(f)\n",
    "print(g)\n",
    "print(f+g) \n",
    "print(f+' '+g) # ' ' para ter espaço entre \"fabio\" e \"gabriel\" na hora do print"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a6940d8-eeaa-4c49-bc7c-a5b056f22241",
   "metadata": {},
   "source": [
    "DADOS TIPO BOOL - LÓGICA\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f36edd34-e9d0-477d-bd1f-8067a9fa14f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a==1 #verifica de o valor de a é igual a 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e0e6d96a-acff-4fa5-8bc9-8a785b862581",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "bool"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h = (a==1) #se a condição de a=1 for verdadeira, atribuir o valor de h o mesmo valor de a (no caso = 1)\n",
    "print(h)\n",
    "type(h) #bool so pode ser true ou false"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6cb5f626-34e0-403a-9458-e74838cd5e25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "bool"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h = (a==2) #se o valor de a=2 for true, atribuir ao h o valor de a \n",
    "print(h)\n",
    "type(h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ef01ec35-8527-4fd0-8a8e-0c841c78fb78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ii = 'True' #atribui a variavel ii a string \"true\"\n",
    "type(ii) # qual \"tipo\" da variavel ii"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a53cc0c-2f82-45f3-bd36-003142d17fc5",
   "metadata": {},
   "source": [
    "OPERAÇÃO DE COMPARAÇÃO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c2145928-de6f-49a0-a7e2-d347c7c38b93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Operação ==\n",
    "a==b #a é igual a b?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6ebb4cfd-2574-4cc3-94e0-64bbc05aade4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Operação ><\n",
    "a>b #a é maior que b?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d50ec509-2eb1-4e90-8eb2-96f35c3c4e7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Operação !=\n",
    "a!=b #a é diferente de b?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8720f32-1992-429a-83c7-1d1d911cc136",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Operação >= ou <=\n",
    "a>=b #a é maior ou igual a b?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68cf5288-d451-4feb-832f-82ff8a6583e8",
   "metadata": {},
   "source": [
    "OPERAÇÕES MATEMÁTICAS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ef927b19-5117-4b9a-b2a6-364fe3546dc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#soma\n",
    "a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3c147411-5adf-4370-a13d-64ccb545fce0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.0\n"
     ]
    }
   ],
   "source": [
    "# Soma e atribui valor\n",
    "ab = a+b #a variavel ab é a soma de a + b\n",
    "print(ab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "69677d2e-f348-41d9-be7c-ef3f863eb508",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Não use l como nome de variável\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "# Multiplicação\n",
    "l = a*b # Não use l como variável\n",
    "print(\"Não use l como nome de variável\")\n",
    "j = a*b #atribuir a variavel j o valor de axb\n",
    "print(j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c333319c-4421-4097-a342-f72d40c1b88c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Divisão\n",
    "a/b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1a6c65bf-05be-4af6-b68b-9c9136a4d4d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Potencia\n",
    "5**2 #5 elevado ao quadrado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "786da193-29b7-4c40-9949-12a3d5bf7bc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22026.465794806718"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Operações matemáticas com a bibliotéca math\n",
    "import math #importa o modo math que fornece varias funções matemáticas\n",
    "\n",
    "math.exp(10) #calcula o exponencial de 10, eleva o numero de euler a potencia de 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2531b3c7-f80f-4ee5-95da-f52137cca143",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.exp(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8f9346c6-ed2b-4a5a-9670-97e3623dff7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.718281828459045"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=1\n",
    "math.exp(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5163cff2-a47e-4492-ac54-4fe0cec07fd5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.718281828459045"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.exp(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c04f2331-c195-4f46-a826-828d58bc32b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.5399929762484854e-05"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.exp(-10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1b2eab12-fe3c-4a27-a7c5-d58f05f409b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math as mt # math = mt (em vez que escrever math pode escrever so mt)\n",
    "mt.log(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "60a28a31-0be1-4434-8725-3a3d38643f15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mt.log10(100)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff4b13c7-23a9-4e87-98d2-2a754605a09f",
   "metadata": {},
   "source": [
    "LISTAS\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "78f36c84-367a-4974-a857-7dc21c915663",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "myFirstList = [1,2,3] #lista 1 2 3\n",
    "print(myFirstList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "d20b7d21-3508-4d12-90a7-5b2acc5f04fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "# Acessando valores da lista pelo index\n",
    "print(myFirstList[0]) #imprime o valor no índice 0 da lista (1). Os indices da lista começam em 0, então o primeiro valor vai ser o indice 0 \n",
    "print(myFirstList[2]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "dcb04059-cf38-4f5a-9ac7-4bf3c876b80a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myFirstList==a #a lista é igual a \"a\"?. Lembrar sempre de colocar as maiusculas corretas na variavel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "30d87e2a-a7b3-426c-b8b3-fa5bbed084f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myFirstList[0]==a #O índice 0 da lista é =a? (lembrando que a=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "7c364348-5c08-46ad-a90a-182aa55aaca6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 1, 'c']\n"
     ]
    }
   ],
   "source": [
    "mySecList = [1,a,'c'] #c é uma string\n",
    "print(mySecList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "587b44e7-b246-4bd7-acf6-7eebe6d0b018",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(mySecList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2b8db2ce-bbf8-47f9-a94a-2b2c010f7a03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(mySecList[2]) #\"tipo do indice 2 da lista"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8ef15633-53a7-45ce-98ee-988e3c3b60f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(mySecList[1]) #tipo do índice 1 da lista"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a38ad18c-ff38-472b-abe4-c6bd2a807bc2",
   "metadata": {},
   "source": [
    "CAMINHO = PATH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "6a40c679-a40f-4c0a-8963-6c0d886a9aad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\usuario\\OneDrive\\Documentos\\GitHub\\ENS410064\n"
     ]
    }
   ],
   "source": [
    "path = r\"C:\\Users\\usuario\\OneDrive\\Documentos\\GitHub\\ENS410064\"\n",
    "print(path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "25b58e29-2ebf-4d0a-8728-b43d5d6c9a2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['.git',\n",
       " '.ipynb_checkpoints',\n",
       " 'Jade Grijo.md',\n",
       " 'jade nome.ipynb',\n",
       " 'notebook.txt',\n",
       " 'pyEnv.gitignore.txt',\n",
       " 'Untitled.ipynb',\n",
       " 'venv']"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "# Listar arquivos na pasta\n",
    "os.listdir(path) #listar os caminhos da pasta (path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "316d0c5d-f385-4c9a-82c6-0cb460940f17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'.git'"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Selecionar primeiro arquivo listado\n",
    "os.listdir(path)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "55b6e440-fb35-4d2b-a1cc-ce9eee88788b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\usuario\\\\OneDrive\\\\Documentos\\\\GitHub\\\\ENS410064/.git'"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Concatenando caminhos\n",
    "path+\"/\"+os.listdir(path)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "4f08baa4-f7af-481a-bf2e-9867ff04d6a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['COMMIT_EDITMSG',\n",
       " 'config',\n",
       " 'description',\n",
       " 'FETCH_HEAD',\n",
       " 'HEAD',\n",
       " 'hooks',\n",
       " 'index',\n",
       " 'info',\n",
       " 'logs',\n",
       " 'objects',\n",
       " 'packed-refs',\n",
       " 'refs']"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Listando caminho concatenado\n",
    "os.listdir(path+\"/\"+os.listdir(path)[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "1ef93dac-c205-48b5-93d0-85c11a11ab30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\usuario\\\\OneDrive\\\\Documentos\\\\GitHub\\\\ENS410064'"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Diretório que estou trababalhando\n",
    "os.getcwd() #get current working directory (obter o diretorio de trabalho atual)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "3f83dde0-1ae5-4cd8-854f-417478a197e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mudo de diretório para o caminho \n",
    "os.chdir('C:\\\\Users\\\\usuario\\\\OneDrive\\\\Documentos')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "baf35e61-764a-464e-9900-8baba29b12e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\usuario\\\\OneDrive\\\\Documentos'"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd() #get current working directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "3e2c134a-998c-43f4-88fc-01e570a5e1c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Criando diretório C:\\Users\\usuario\\OneDrive\\Documentos/test\n"
     ]
    }
   ],
   "source": [
    "# Criando diretório\n",
    "new_path = os.getcwd()+'/test'\n",
    "\n",
    "if os.path.isdir(new_path):\n",
    "    print('diretório já existe')\n",
    "else:\n",
    "    print('Criando diretório '+new_path)\n",
    "    os.mkdir(new_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d67cdcf6-88b3-4582-93ec-9ce49213d4ed",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
